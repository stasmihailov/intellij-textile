/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.potniype4kin.textile.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.potniype4kin.textile.psi.TextileType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Textile.flex</tt>
 */
class TextileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int bold_text = 2;
  public static final int italic_text = 4;
  public static final int header = 6;
  public static final int list = 8;
  public static final int numbered_list = 10;
  public static final int inline_code = 12;
  public static final int code_def = 14;
  public static final int code_delim = 16;
  public static final int code = 18;
  public static final int info_start = 20;
  public static final int info_start_title = 22;
  public static final int info = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\32\1\33\1\34\1\1\22\0\1\36\1\24\1\0\1\10\4\0\1\23\1\25\1\7\1\26"+
    "\1\0\1\3\1\6\1\27\1\0\6\5\3\0\1\17\2\0\1\41\1\0\1\30\1\0\32\35\4\0\1\31\1"+
    "\0\2\35\1\12\1\14\1\15\1\22\1\35\1\4\1\20\2\35\1\40\1\35\1\21\1\13\4\35\1"+
    "\37\6\35\1\11\1\0\1\16\7\0\1\33\242\0\2\33\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\3\4\1\5\2\1\1\4"+
    "\1\1\1\4\1\3\2\4\1\6\1\7\1\3\1\10"+
    "\3\11\1\12\1\3\1\13\1\14\2\4\1\15\1\3"+
    "\1\11\1\4\1\16\1\3\1\17\1\4\2\17\1\20"+
    "\2\21\1\4\1\22\1\23\2\0\1\24\1\0\1\25"+
    "\1\1\1\0\1\1\1\22\1\0\1\22\1\26\1\0"+
    "\1\27\1\0\1\30\1\0\1\31\6\0\1\32\5\0"+
    "\2\1\1\33\1\34\1\35\1\36\1\37\5\0\1\1"+
    "\1\40\3\0\1\41\1\42\1\43\1\1\2\43\3\0"+
    "\1\44\1\0\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u01dc\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u01dc\0\u030e\0\u0330\0\u0352\0\u0374\0\u01dc\0\u0396\0\u03b8"+
    "\0\u03da\0\u03fc\0\u041e\0\u01dc\0\u0440\0\u01dc\0\u01dc\0\u0462"+
    "\0\u0484\0\u01dc\0\u04a6\0\u04c8\0\u04ea\0\u01dc\0\u050c\0\u01dc"+
    "\0\u052e\0\u0550\0\u0572\0\u01dc\0\u0594\0\u05b6\0\u05d8\0\u01dc"+
    "\0\u01dc\0\u05fa\0\u061c\0\u01dc\0\u063e\0\u01dc\0\u0660\0\u0682"+
    "\0\u06a4\0\u0682\0\u06c6\0\u06e8\0\u01dc\0\u06e8\0\u01dc\0\u070a"+
    "\0\u01dc\0\u072c\0\u01dc\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6"+
    "\0\u0484\0\u01dc\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2"+
    "\0\u08c4\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u08e6\0\u0908"+
    "\0\u092a\0\u094c\0\u096e\0\u0990\0\u01dc\0\u09b2\0\u09d4\0\u09f6"+
    "\0\u01dc\0\u01dc\0\u0a18\0\u0a3a\0\u01dc\0\u01ba\0\u0a5c\0\u0a7e"+
    "\0\u0aa0\0\u01dc\0\u0ac2\0\u01dc\0\u01dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\4\16\1\21\1\16\1\22\17\16"+
    "\1\23\1\17\1\16\1\20\1\16\1\20\4\16\1\24"+
    "\1\20\1\25\1\26\2\16\1\27\1\30\1\22\17\16"+
    "\1\23\1\24\1\16\1\20\1\16\1\20\4\16\1\31"+
    "\1\32\4\16\1\33\1\16\1\31\17\16\2\31\1\16"+
    "\1\32\1\16\1\32\4\16\1\31\1\32\4\16\1\31"+
    "\1\16\1\31\17\16\1\34\1\31\1\16\1\32\1\16"+
    "\1\32\3\16\1\35\1\36\1\37\4\35\1\31\1\35"+
    "\1\31\17\35\1\31\1\36\1\35\1\37\1\35\1\37"+
    "\3\35\1\40\1\36\1\37\4\40\1\31\1\40\1\31"+
    "\17\40\1\31\1\36\1\40\1\37\1\40\1\37\3\40"+
    "\1\41\1\31\1\42\4\41\1\31\1\41\1\31\4\41"+
    "\1\43\12\41\2\31\1\41\1\42\1\41\1\42\3\41"+
    "\1\31\1\44\1\45\13\31\1\46\1\47\3\31\1\50"+
    "\6\31\1\44\1\31\1\45\1\31\1\45\5\31\1\32"+
    "\1\31\1\51\5\31\4\51\1\52\1\31\3\51\1\50"+
    "\10\31\1\32\1\51\1\53\2\51\1\31\1\41\1\17"+
    "\1\54\4\41\1\31\1\41\1\55\17\41\1\31\1\17"+
    "\1\41\1\54\1\41\1\54\3\41\1\31\1\56\1\57"+
    "\13\31\1\60\1\61\3\31\1\50\6\31\1\56\1\31"+
    "\1\57\1\31\1\57\3\31\1\62\1\56\1\63\6\62"+
    "\1\31\4\62\1\64\13\62\1\56\1\62\1\63\1\62"+
    "\1\63\3\62\1\65\1\17\1\66\6\65\1\67\4\65"+
    "\1\31\13\65\1\17\1\65\1\66\1\65\1\66\3\65"+
    "\1\16\2\0\4\16\1\0\6\16\1\0\12\16\2\0"+
    "\1\16\1\0\1\16\1\0\3\16\43\0\1\17\1\20"+
    "\27\0\1\17\1\0\1\20\1\0\1\20\3\0\7\70"+
    "\1\0\32\70\11\0\1\71\1\72\5\0\1\73\21\0"+
    "\31\74\1\75\10\74\1\16\1\0\1\76\1\77\3\16"+
    "\1\100\6\16\1\0\12\16\2\0\1\16\1\76\1\16"+
    "\1\76\4\16\2\0\2\16\1\101\1\16\1\0\6\16"+
    "\1\0\12\16\2\0\1\16\1\0\1\16\1\0\3\16"+
    "\2\70\1\76\1\102\3\70\1\103\1\104\23\70\1\76"+
    "\1\70\1\76\3\70\1\16\1\0\1\105\4\16\1\106"+
    "\1\30\5\16\1\0\12\16\2\0\1\16\1\105\1\16"+
    "\1\105\3\16\2\0\1\32\31\0\1\32\1\0\1\32"+
    "\3\0\7\107\1\110\32\107\31\111\1\112\10\111\1\35"+
    "\2\0\4\35\1\0\6\35\1\0\12\35\2\0\1\35"+
    "\1\0\1\35\1\0\3\35\1\0\1\36\1\37\27\0"+
    "\1\36\1\0\1\37\1\0\1\37\3\0\1\40\2\0"+
    "\4\40\1\0\6\40\1\0\12\40\2\0\1\40\1\0"+
    "\1\40\1\0\3\40\1\41\2\0\4\41\1\0\6\41"+
    "\1\0\12\41\2\0\1\41\1\0\1\41\1\0\3\41"+
    "\2\0\1\42\31\0\1\42\1\0\1\42\3\0\1\41"+
    "\2\0\4\41\1\0\6\41\1\113\12\41\2\0\1\41"+
    "\1\0\1\41\1\0\3\41\1\0\1\44\1\45\27\0"+
    "\1\44\1\0\1\45\1\0\1\45\6\0\1\114\20\0"+
    "\1\115\1\0\1\116\1\117\1\120\15\0\1\121\5\0"+
    "\4\121\1\122\1\0\3\121\12\0\4\121\3\0\1\32"+
    "\1\0\1\121\5\0\4\121\1\122\1\0\3\121\11\0"+
    "\1\32\1\121\1\53\2\121\2\0\1\17\1\54\27\0"+
    "\1\17\1\0\1\54\1\0\1\54\15\0\1\123\30\0"+
    "\1\56\1\57\27\0\1\56\1\0\1\57\1\0\1\57"+
    "\42\0\1\124\2\0\1\62\2\0\13\62\1\0\13\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\1\56"+
    "\1\63\27\0\1\56\1\0\1\63\1\0\1\63\3\0"+
    "\1\65\2\0\13\65\1\0\13\65\1\0\1\65\1\0"+
    "\1\65\1\0\3\65\1\0\1\17\1\66\27\0\1\17"+
    "\1\0\1\66\1\0\1\66\23\0\1\125\34\0\1\126"+
    "\47\0\1\127\20\0\31\74\1\0\10\74\1\16\1\0"+
    "\1\76\1\130\3\16\1\100\6\16\1\0\12\16\2\0"+
    "\1\16\1\76\1\16\1\76\3\16\2\0\1\76\1\100"+
    "\3\0\1\100\24\0\1\76\1\0\1\76\3\0\1\16"+
    "\2\0\3\16\1\131\1\0\6\16\1\0\12\16\2\0"+
    "\1\16\1\0\1\16\1\0\3\16\2\0\1\76\1\100"+
    "\3\0\1\103\1\106\23\0\1\76\1\0\1\76\5\0"+
    "\1\105\4\0\2\106\23\0\1\105\1\0\1\105\3\0"+
    "\7\107\1\0\32\107\31\111\1\0\10\111\25\0\1\132"+
    "\41\0\1\133\41\0\1\134\41\0\1\135\41\0\1\136"+
    "\27\0\1\137\46\0\1\140\42\0\1\141\34\0\1\142"+
    "\47\0\1\143\17\0\1\16\1\0\1\76\1\144\3\16"+
    "\1\100\6\16\1\0\12\16\2\0\1\16\1\76\1\16"+
    "\1\76\4\16\1\0\1\145\4\16\1\0\6\16\1\0"+
    "\12\16\2\0\1\16\1\145\1\16\1\145\3\16\14\0"+
    "\1\146\64\0\1\147\24\0\1\150\34\0\1\151\37\0"+
    "\1\152\26\0\1\16\1\153\1\76\1\154\3\16\1\100"+
    "\6\16\1\0\12\16\1\0\1\155\1\156\1\155\1\16"+
    "\1\76\3\16\15\0\1\157\64\0\1\160\14\0\1\161"+
    "\60\0\1\155\7\0\1\16\1\0\1\76\1\154\3\16"+
    "\1\100\6\16\1\0\12\16\2\0\1\16\1\76\1\16"+
    "\1\76\3\16\16\0\1\162\40\0\1\163\42\0\1\164"+
    "\64\0\1\165";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2788];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\1\1\11\4\1\1\11\4\1\1\11\4\1"+
    "\1\11\5\1\1\11\1\1\2\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\3\1\1\11\3\1\2\11\2\0"+
    "\1\11\1\0\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\6\0"+
    "\1\11\5\0\2\1\5\11\5\0\1\1\1\11\3\0"+
    "\2\11\2\1\1\11\1\1\3\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TextileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TextileType.TEXT;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return TextileType.EOL;
            } 
            // fall through
          case 40: break;
          case 3: 
            { return TextileType.SPACE;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return TextileType.PARAGRAPH_BREAK;
            } 
            // fall through
          case 43: break;
          case 6: 
            { return TextileType.HEADER_TEXT;
            } 
            // fall through
          case 44: break;
          case 7: 
            { yybegin(YYINITIAL);
        return TextileType.EOL;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return TextileType.LIST_TEXT;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return TextileType.CODE;
            } 
            // fall through
          case 47: break;
          case 10: 
            { yybegin(code);
        return TextileType.EOL;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return TextileType.CODE_DEF_END;
            } 
            // fall through
          case 49: break;
          case 12: 
            { yybegin(code_delim);
        return TextileType.CODE_DELIM;
            } 
            // fall through
          case 50: break;
          case 13: 
            { yybegin(code);
        return TextileType.CODE_DEF_END;
            } 
            // fall through
          case 51: break;
          case 14: 
            { yybegin(info);
        return TextileType.EOL;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return TextileType.INFO_START;
            } 
            // fall through
          case 53: break;
          case 16: 
            { yybegin(info);
        return TextileType.INFO_START;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return TextileType.INFO_TEXT;
            } 
            // fall through
          case 55: break;
          case 18: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(bold_text);
        return TextileType.BOLD_TEXT_DELIM;
            } 
            // fall through
          case 56: break;
          case 19: 
            { yybegin(inline_code);
        return TextileType.INLINE_CODE_START;
            } 
            // fall through
          case 57: break;
          case 20: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(bold_text);
        return TextileType.ITALIC_TEXT_DELIM;
            } 
            // fall through
          case 58: break;
          case 21: 
            { yybegin(list);
        return TextileType.LIST_DELIM;
            } 
            // fall through
          case 59: break;
          case 22: 
            { yybegin(numbered_list);
        return TextileType.ORDERED_LIST_DELIM;
            } 
            // fall through
          case 60: break;
          case 23: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(YYINITIAL);
        return TextileType.BOLD_TEXT_DELIM;
            } 
            // fall through
          case 61: break;
          case 24: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(YYINITIAL);
        return TextileType.ITALIC_TEXT_DELIM;
            } 
            // fall through
          case 62: break;
          case 25: 
            { yybegin(YYINITIAL);
        return TextileType.INLINE_CODE_END;
            } 
            // fall through
          case 63: break;
          case 26: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return TextileType.CODE_LANGUAGE;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return TextileType.SIGN_MINUS;
            } 
            // fall through
          case 65: break;
          case 28: 
            { return TextileType.SIGN_WARNING;
            } 
            // fall through
          case 66: break;
          case 29: 
            { return TextileType.SIGN_PLUS;
            } 
            // fall through
          case 67: break;
          case 30: 
            { return TextileType.SIGN_OK;
            } 
            // fall through
          case 68: break;
          case 31: 
            { return TextileType.SIGN_QUESTION;
            } 
            // fall through
          case 69: break;
          case 32: 
            { yybegin(header);
        return TextileType.HEADER_START;
            } 
            // fall through
          case 70: break;
          case 33: 
            { yybegin(code_def);
        return TextileType.CODE_DEF;
            } 
            // fall through
          case 71: break;
          case 34: 
            { yybegin(info_start);
        return TextileType.INFO_START;
            } 
            // fall through
          case 72: break;
          case 35: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return TextileType.CHAPTER_BREAK;
            } 
            // fall through
          case 73: break;
          case 36: 
            { yybegin(YYINITIAL);
        return TextileType.CODE_END;
            } 
            // fall through
          case 74: break;
          case 37: 
            { yybegin(YYINITIAL);
        return TextileType.INFO_END;
            } 
            // fall through
          case 75: break;
          case 38: 
            { yybegin(info_start_title);
        return TextileType.INFO_START;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
