/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.potniype4kin.textile.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.potniype4kin.textile.psi.TextileType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Textile.flex</tt>
 */
class TextileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int header = 2;
  public static final int list = 4;
  public static final int code_start = 6;
  public static final int code = 8;
  public static final int info_start = 10;
  public static final int info = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15168 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\4"+
    "\1\12\1\23\1\4\1\12\1\24\1\4\1\12\1\25\1\26\1\12\1\27\1\30\1\1\1\27\4\12\1"+
    "\31\6\12\1\32\1\33\1\34\1\1\3\12\1\35\6\12\1\15\3\12\1\36\2\12\1\37\1\1\1"+
    "\12\1\40\4\1\1\12\1\41\1\1\1\42\1\21\7\12\1\43\1\4\1\32\1\44\1\33\1\45\1\46"+
    "\1\47\1\43\1\15\1\50\1\44\1\33\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\33\1\57"+
    "\1\60\1\61\1\43\1\62\1\63\1\44\1\33\1\57\1\64\1\65\1\43\1\66\1\67\1\70\1\71"+
    "\1\31\1\72\1\73\1\54\1\1\1\74\1\75\1\33\1\76\1\77\1\100\1\43\1\1\1\74\1\75"+
    "\1\33\1\101\1\77\1\102\1\43\1\103\1\104\1\75\1\12\1\35\1\105\1\106\1\43\1"+
    "\107\1\110\1\111\1\12\1\112\1\113\1\114\1\54\1\115\1\4\2\12\1\27\1\116\1\117"+
    "\2\1\1\120\1\121\1\122\1\123\1\124\1\125\2\1\1\61\1\126\1\117\1\127\1\130"+
    "\1\12\1\131\1\4\1\132\1\130\1\12\1\131\1\133\3\1\4\12\1\117\4\12\1\37\2\12"+
    "\1\134\2\12\1\135\24\12\1\136\1\137\2\12\1\136\2\12\1\140\1\141\1\13\3\12"+
    "\1\141\3\12\1\35\2\1\1\12\1\1\5\12\1\142\1\4\45\12\1\34\1\12\1\4\1\27\4\12"+
    "\1\143\1\144\1\145\1\146\1\12\1\146\1\12\1\147\1\145\1\150\5\12\1\151\1\117"+
    "\1\1\1\152\1\117\5\12\1\24\2\12\1\27\4\12\1\55\1\12\1\116\2\40\1\54\1\12\1"+
    "\37\1\146\2\12\1\40\1\12\2\117\2\1\1\12\1\40\3\12\1\116\1\12\1\34\2\117\1"+
    "\153\1\116\4\1\4\12\1\40\1\117\1\154\1\147\7\12\1\147\3\12\1\24\1\76\2\12"+
    "\1\37\1\144\4\1\1\155\1\12\1\156\17\12\1\157\21\12\1\142\2\12\1\142\1\160"+
    "\1\12\1\37\3\12\1\161\1\162\1\163\1\131\1\162\3\1\1\164\1\61\1\165\1\1\1\166"+
    "\1\1\1\131\3\1\2\12\1\61\1\167\1\170\1\171\1\125\1\172\1\1\2\12\1\144\62\1"+
    "\1\54\2\12\1\117\161\1\2\12\1\116\2\12\1\116\10\12\1\173\1\147\2\12\1\134"+
    "\3\12\1\174\1\164\1\12\1\175\4\176\2\12\2\1\1\164\35\1\1\177\1\1\1\4\1\200"+
    "\1\4\4\12\1\201\1\4\4\12\1\135\1\202\1\12\1\37\1\4\4\12\1\116\1\1\1\12\1\27"+
    "\3\1\1\12\40\1\133\12\1\55\4\1\135\12\1\55\2\1\10\12\1\131\4\1\2\12\1\37\20"+
    "\12\1\131\1\12\1\40\1\1\3\12\1\203\7\12\1\15\1\1\1\204\1\205\5\12\1\206\1"+
    "\12\1\116\1\24\3\1\1\204\2\12\1\24\1\1\3\12\1\147\4\12\1\55\1\117\1\12\1\207"+
    "\2\12\1\37\2\12\1\147\1\12\1\131\4\12\1\210\1\117\1\12\1\116\3\12\1\175\1"+
    "\37\1\117\1\12\1\111\4\12\1\30\1\152\1\12\1\211\1\212\1\213\1\176\2\12\1\135"+
    "\1\55\7\12\1\214\1\117\72\12\1\147\1\12\1\215\2\12\1\40\20\1\26\12\1\37\6"+
    "\12\1\117\2\1\1\175\1\216\1\33\1\217\1\220\6\12\1\15\1\1\1\221\25\12\1\37"+
    "\1\1\4\12\1\205\2\12\1\24\2\1\1\40\1\12\1\1\1\12\1\222\1\223\2\1\1\132\7\12"+
    "\1\131\1\1\1\117\1\4\1\5\1\4\1\27\1\54\4\12\1\116\1\224\1\225\2\1\1\226\1"+
    "\12\1\13\1\227\2\37\2\1\7\12\1\27\4\1\3\12\1\146\7\1\1\230\10\1\1\12\1\131"+
    "\3\12\2\61\1\1\2\12\1\1\1\12\1\27\2\12\1\27\1\12\1\37\2\12\1\231\1\232\2\1"+
    "\11\12\1\37\1\117\2\12\1\231\1\12\1\40\2\12\1\24\3\12\1\147\11\1\23\12\1\175"+
    "\1\12\1\55\1\24\11\1\1\233\2\12\1\234\1\12\1\55\1\12\1\175\1\12\1\116\4\1"+
    "\1\12\1\235\1\12\1\55\1\12\1\117\4\1\3\12\1\236\4\1\1\237\1\240\1\12\1\241"+
    "\2\1\1\12\1\131\1\12\1\131\2\1\1\130\1\12\1\175\1\1\3\12\1\55\1\12\1\55\1"+
    "\12\1\30\1\12\1\15\6\1\4\12\1\144\3\1\3\12\1\30\3\12\1\30\60\1\4\12\1\175"+
    "\1\1\1\54\1\164\3\12\1\27\1\1\1\12\1\144\1\117\3\12\1\132\1\1\2\12\1\242\4"+
    "\12\1\243\1\244\2\1\1\12\1\21\1\12\1\245\4\1\1\246\1\25\1\144\3\12\1\27\1"+
    "\117\1\32\1\44\1\33\1\57\1\64\1\247\1\250\1\146\10\1\4\12\1\27\1\117\2\1\4"+
    "\12\1\251\1\117\12\1\3\12\1\252\1\61\1\253\2\1\4\12\1\254\1\117\2\1\3\12\1"+
    "\24\1\117\3\1\1\12\1\76\1\40\1\117\26\1\4\12\1\117\1\164\34\1\3\12\1\144\20"+
    "\1\1\33\2\12\1\13\1\61\1\117\1\1\1\205\1\12\1\205\1\130\1\175\64\1\71\12\1"+
    "\117\6\1\6\12\1\116\1\1\14\12\1\147\53\1\2\12\1\116\75\1\44\12\1\175\33\1"+
    "\43\12\1\144\1\12\1\116\1\117\6\1\1\12\1\37\1\146\3\12\1\175\1\147\1\117\1"+
    "\221\1\255\1\12\67\1\4\12\1\146\2\12\1\116\1\164\1\12\4\1\1\61\1\1\76\12\1"+
    "\131\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\131\1\144\1\256\114\1\1\257"+
    "\1\260\1\261\1\1\1\262\11\1\1\263\33\1\5\12\1\132\3\12\1\145\1\264\1\265\1"+
    "\266\3\12\1\267\1\270\1\12\1\271\1\272\1\75\24\12\1\252\1\12\1\75\1\135\1"+
    "\12\1\135\1\12\1\132\1\12\1\132\1\116\1\12\1\116\1\12\1\33\1\12\1\33\1\12"+
    "\1\273\3\12\40\1\3\12\1\215\2\12\1\131\1\274\1\165\1\154\1\4\25\1\1\13\1\206"+
    "\1\275\75\1\14\12\1\146\1\175\2\1\4\12\1\27\1\117\112\1\1\266\1\12\1\276\1"+
    "\277\1\300\1\301\1\302\1\303\1\304\1\40\1\305\1\40\47\1\1\12\1\117\1\12\1"+
    "\117\1\12\1\117\47\1\55\12\1\175\2\1\103\12\1\146\15\12\1\37\150\12\1\15\25"+
    "\1\41\12\1\37\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3168 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\11\0\1\7\2\0\1\3\1\6\1\0\1\22\6\5\3\22"+
    "\1\21\6\0\32\22\4\0\1\22\1\0\2\22\1\11\1\13\1\14\1\20\1\22\1\4\1\16\4\22\1"+
    "\17\1\12\13\22\1\10\1\0\1\15\14\0\1\22\12\0\1\22\4\0\1\22\5\0\27\22\1\0\12"+
    "\22\4\0\14\22\16\0\5\22\7\0\1\22\1\0\1\22\1\0\5\22\1\0\2\22\2\0\4\22\1\0\1"+
    "\22\6\0\1\22\1\0\3\22\1\0\1\22\1\0\4\22\1\0\23\22\1\0\20\22\2\0\1\22\6\0\10"+
    "\22\10\0\16\22\1\0\1\22\1\0\2\22\1\0\2\22\1\0\1\22\10\0\13\22\5\0\3\22\15"+
    "\0\12\22\4\0\6\22\1\0\10\22\2\0\12\22\1\0\23\22\2\0\14\22\2\0\11\22\4\0\1"+
    "\22\5\0\16\22\2\0\14\22\4\0\5\22\1\0\10\22\6\0\20\22\2\0\13\22\2\0\16\22\1"+
    "\0\1\22\3\0\4\22\2\0\11\22\2\0\2\22\2\0\4\22\10\0\1\22\4\0\2\22\1\0\1\22\1"+
    "\0\3\22\1\0\6\22\4\0\2\22\1\0\2\22\1\0\2\22\1\0\2\22\2\0\1\22\1\0\5\22\4\0"+
    "\2\22\2\0\3\22\3\0\1\22\7\0\4\22\1\0\1\22\7\0\20\22\13\0\3\22\1\0\11\22\1"+
    "\0\2\22\1\0\2\22\1\0\5\22\2\0\12\22\1\0\3\22\1\0\3\22\2\0\1\22\30\0\1\22\7"+
    "\0\3\22\1\0\10\22\2\0\6\22\2\0\2\22\2\0\3\22\10\0\2\22\4\0\2\22\1\0\1\22\1"+
    "\0\1\22\20\0\2\22\1\0\6\22\3\0\3\22\1\0\4\22\3\0\2\22\1\0\1\22\1\0\2\22\3"+
    "\0\2\22\3\0\3\22\3\0\5\22\3\0\3\22\1\0\4\22\2\0\1\22\6\0\1\22\10\0\4\22\1"+
    "\0\10\22\1\0\3\22\1\0\30\22\3\0\10\22\1\0\3\22\1\0\4\22\7\0\2\22\1\0\3\22"+
    "\5\0\4\22\1\0\5\22\2\0\4\22\5\0\2\22\7\0\1\22\2\0\2\22\16\0\3\22\1\0\10\22"+
    "\1\0\7\22\1\0\3\22\1\0\5\22\5\0\4\22\7\0\1\22\12\0\6\22\2\0\2\22\1\0\22\22"+
    "\3\0\10\22\1\0\11\22\1\0\1\22\2\0\7\22\3\0\1\22\4\0\6\22\1\0\1\22\1\0\10\22"+
    "\2\0\2\22\14\0\17\22\1\0\12\22\7\0\2\22\1\0\1\22\2\0\2\22\1\0\1\22\2\0\1\22"+
    "\6\0\4\22\1\0\7\22\1\0\3\22\1\0\1\22\1\0\1\22\2\0\2\22\1\0\15\22\1\0\3\22"+
    "\2\0\5\22\1\0\1\22\1\0\6\22\2\0\12\22\2\0\4\22\10\0\2\22\13\0\1\22\1\0\1\22"+
    "\1\0\1\22\4\0\12\22\1\0\24\22\3\0\5\22\1\0\12\22\6\0\1\22\11\0\6\22\1\0\1"+
    "\22\5\0\1\22\2\0\13\22\1\0\15\22\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22\2\0\1"+
    "\22\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22\2\0\16\22\2\0\6\22\2\0\13\22\3\0\13"+
    "\22\7\0\15\22\1\0\7\22\13\0\4\22\14\0\1\22\1\0\2\22\14\0\4\22\3\0\1\22\4\0"+
    "\2\22\15\0\3\22\11\0\1\22\23\0\10\22\1\0\23\22\1\0\2\22\6\0\6\22\5\0\15\22"+
    "\1\0\1\22\1\0\1\22\1\0\1\22\1\0\6\22\1\0\7\22\1\0\1\22\3\0\3\22\1\0\7\22\3"+
    "\0\4\22\2\0\6\22\23\0\1\22\4\0\1\22\14\0\1\22\15\0\1\22\2\0\1\22\4\0\1\22"+
    "\2\0\12\22\1\0\1\22\3\0\5\22\6\0\1\22\1\0\1\22\1\0\1\22\1\0\4\22\1\0\1\22"+
    "\5\0\5\22\4\0\1\22\1\0\5\22\6\0\15\22\7\0\10\22\11\0\7\22\1\0\7\22\6\0\3\22"+
    "\11\0\5\22\2\0\5\22\3\0\7\22\2\0\2\22\2\0\3\22\5\0\16\22\1\0\12\22\1\0\1\22"+
    "\7\0\11\22\2\0\27\22\2\0\15\22\3\0\1\22\1\0\1\22\2\0\1\22\16\0\1\22\2\0\5"+
    "\22\12\0\6\22\2\0\6\22\2\0\6\22\11\0\13\22\1\0\2\22\2\0\7\22\4\0\5\22\3\0"+
    "\5\22\5\0\12\22\1\0\5\22\1\0\1\22\1\0\2\22\1\0\2\22\1\0\12\22\3\0\15\22\3"+
    "\0\2\22\30\0\3\22\2\0\6\22\2\0\6\22\2\0\6\22\2\0\3\22\3\0\14\22\1\0\16\22"+
    "\1\0\2\22\1\0\1\22\15\0\1\22\2\0\4\22\4\0\10\22\1\0\5\22\12\0\6\22\2\0\1\22"+
    "\1\0\14\22\1\0\2\22\3\0\1\22\2\0\4\22\1\0\2\22\12\0\10\22\6\0\6\22\1\0\2\22"+
    "\5\0\10\22\1\0\3\22\1\0\13\22\4\0\3\22\4\0\5\22\2\0\1\22\11\0\5\22\5\0\3\22"+
    "\3\0\13\22\1\0\1\22\3\0\10\22\6\0\1\22\1\0\7\22\1\0\1\22\1\0\4\22\1\0\2\22"+
    "\6\0\1\22\5\0\7\22\2\0\7\22\3\0\6\22\1\0\1\22\10\0\6\22\2\0\10\22\10\0\6\22"+
    "\2\0\1\22\3\0\1\22\13\0\10\22\5\0\15\22\3\0\2\22\6\0\5\22\3\0\6\22\10\0\10"+
    "\22\2\0\7\22\16\0\4\22\4\0\3\22\15\0\1\22\2\0\2\22\2\0\4\22\1\0\14\22\1\0"+
    "\1\22\1\0\7\22\1\0\21\22\1\0\4\22\2\0\10\22\1\0\7\22\1\0\14\22\1\0\4\22\1"+
    "\0\5\22\1\0\1\22\3\0\11\22\1\0\10\22\2\0\2\22\5\0\1\22\12\0\2\22\1\0\2\22"+
    "\1\0\5\22\6\0\2\22\1\0\1\22\2\0\1\22\1\0\12\22\1\0\4\22\1\0\1\22\1\0\1\22"+
    "\6\0\1\22\4\0\1\22\1\0\1\22\1\0\1\22\1\0\3\22\1\0\2\22\1\0\1\22\2\0\1\22\1"+
    "\0\1\22\1\0\1\22\1\0\1\22\1\0\1\22\1\0\2\22\1\0\1\22\2\0\4\22\1\0\7\22\1\0"+
    "\4\22\1\0\4\22\1\0\1\22\1\0\12\22\1\0\5\22\1\0\3\22\1\0\5\22\1\0\5\22");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\6\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\1\1\6\3\1\1\7\1\1\1\10\1\1"+
    "\1\11\3\1\1\12\1\0\1\2\2\0\1\13\5\0"+
    "\1\3\1\0\1\4\1\0\1\14\1\6\3\0\1\7"+
    "\1\0\1\15\1\11\14\0\2\16\1\17\6\0\1\20"+
    "\1\21\1\0\1\20\1\0\1\21\1\22\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\23\0\46\0\71\0\114\0\137\0\162\0\205"+
    "\0\230\0\253\0\276\0\321\0\344\0\367\0\u010a\0\u011d"+
    "\0\u0130\0\u0143\0\u0156\0\u0169\0\367\0\u017c\0\367\0\u018f"+
    "\0\344\0\u01a2\0\367\0\u01b5\0\u01c8\0\u01db\0\367\0\u01ee"+
    "\0\344\0\u0201\0\367\0\u0214\0\u0227\0\u023a\0\367\0\367"+
    "\0\344\0\u010a\0\u024d\0\344\0\u0260\0\u0156\0\u0273\0\u0286"+
    "\0\u0299\0\344\0\u017c\0\344\0\u018f\0\u01a2\0\344\0\u01b5"+
    "\0\u02ac\0\u02bf\0\344\0\u01ee\0\u0201\0\344\0\u0214\0\u02d2"+
    "\0\u02e5\0\u02f8\0\u030b\0\u031e\0\u0331\0\u0344\0\u0357\0\u036a"+
    "\0\u037d\0\u0390\0\344\0\u0156\0\344\0\u03a3\0\u03b6\0\u03c9"+
    "\0\u03dc\0\u03ef\0\u0402\0\344\0\344\0\u0415\0\u0415\0\u0428"+
    "\0\u0428\0\344\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\20\15\1\16\1\17\1\21"+
    "\1\22\2\15\1\23\1\24\13\15\1\25\1\26\1\20"+
    "\20\15\1\25\1\26\1\21\1\22\2\15\1\23\1\24"+
    "\13\15\1\27\1\30\1\20\11\15\1\31\3\15\1\32"+
    "\2\15\1\27\1\30\1\21\1\22\2\15\1\23\1\24"+
    "\4\15\1\31\3\15\1\32\2\15\1\33\1\34\1\20"+
    "\4\15\1\35\13\15\1\33\1\34\1\21\1\22\2\15"+
    "\1\23\1\36\13\15\1\37\1\40\1\20\11\15\1\41"+
    "\3\15\1\42\2\15\1\37\1\40\1\21\1\22\2\15"+
    "\1\23\1\24\4\15\1\41\3\15\1\42\2\15\1\43"+
    "\1\44\1\20\4\15\1\45\13\15\1\43\1\44\1\21"+
    "\1\22\2\15\1\23\1\46\12\15\24\0\1\47\1\50"+
    "\21\0\1\51\1\52\23\0\1\53\21\0\1\54\1\55"+
    "\3\0\1\56\20\0\1\57\17\0\1\54\1\56\3\0"+
    "\1\56\24\0\1\60\4\0\1\61\5\0\1\62\1\63"+
    "\21\0\1\64\1\65\24\0\2\66\3\0\4\66\1\0"+
    "\3\66\1\0\1\66\1\0\1\67\1\70\31\0\1\71"+
    "\22\0\1\72\4\0\1\61\5\0\1\73\1\74\24\0"+
    "\2\75\3\0\4\75\1\0\3\75\1\0\1\75\1\0"+
    "\1\76\1\77\36\0\1\100\15\0\1\60\4\0\1\101"+
    "\7\0\1\102\21\0\1\54\1\103\3\0\1\56\21\0"+
    "\1\104\26\0\1\105\27\0\1\106\15\0\1\107\22\0"+
    "\1\110\27\0\1\111\22\0\1\112\6\0\1\113\21\0"+
    "\1\54\1\114\3\0\1\56\15\0\1\115\33\0\1\116"+
    "\27\0\1\117\15\0\1\120\22\0\1\121\27\0\1\122"+
    "\22\0\1\123\16\0\1\124\20\0\1\125\24\0\1\126"+
    "\22\0\1\127\20\0\1\130\22\0\1\131\25\0\1\132"+
    "\22\0\1\133\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1083];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\13\1\1\11\7\1\1\11\6\1\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\1\1\11\3\0\1\11\1\0\1\1\1\11\14\0"+
    "\1\11\1\1\1\11\6\0\2\11\1\0\1\1\1\0"+
    "\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TextileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 20: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 3: 
            { yybegin(YYINITIAL);
    return TextileType.TEXT;
            } 
            // fall through
          case 22: break;
          case 4: 
            { yybegin(code);
    return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 23: break;
          case 5: 
            { return TextileType.CODE_START;
            } 
            // fall through
          case 24: break;
          case 6: 
            { return TextileType.CODE;
            } 
            // fall through
          case 25: break;
          case 7: 
            { yybegin(info);
    return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 26: break;
          case 8: 
            { return TextileType.INFO_START;
            } 
            // fall through
          case 27: break;
          case 9: 
            { return TextileType.INFO;
            } 
            // fall through
          case 28: break;
          case 10: 
            { return TextileType.PARAGRAPH_BREAK;
            } 
            // fall through
          case 29: break;
          case 11: 
            { yybegin(list);
    return TextileType.LIST_DELIM;
            } 
            // fall through
          case 30: break;
          case 12: 
            { String codeLanguage = yytext().toString().substring(1);
    return TextileType.CODE_START;
            } 
            // fall through
          case 31: break;
          case 13: 
            { // get info title, if present
    return TextileType.INFO_START;
            } 
            // fall through
          case 32: break;
          case 14: 
            { return TextileType.CHAPTER_BREAK;
            } 
            // fall through
          case 33: break;
          case 15: 
            { yybegin(header);
    return TextileType.HEADER_START;
            } 
            // fall through
          case 34: break;
          case 16: 
            { yybegin(code_start);
    return TextileType.CODE_START;
            } 
            // fall through
          case 35: break;
          case 17: 
            { yybegin(info_start);
    return TextileType.INFO_START;
            } 
            // fall through
          case 36: break;
          case 18: 
            { yybegin(YYINITIAL);
    return TextileType.CODE_END;
            } 
            // fall through
          case 37: break;
          case 19: 
            { yybegin(YYINITIAL);
    return TextileType.INFO_END;
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
